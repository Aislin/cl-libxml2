<?xml version="1.0" encoding="utf-8"?>

<?xml-stylesheet type="text/xsl" href="style.xsl"?>

<page>
    <title>Code Examples</title>

    <p>
        <cl-libxml2 /> is a binding to C-library, resource management is necessary! Use:
    <ul>
        <li>tree:release</li>
        <li>tree:with-parse-document</li>
        <li>tree:with-libxml2-object</li>
        <li><a href="http://code.google.com/p/garbage-pools/">garbage-pools</a></li>
    </ul>
    </p>


    <h2>Tree API</h2>

    <h3>parse file</h3>
    <code>
        (tree:release (tree:parse #P"example.xml"))
    </code>

    <h3>parse string</h3>
    <code>
        (tree:with-libxml2-object (doc (tree:parse "&lt;root /&gt;"))
            ...)
    </code>

    <h3>with-parse-document</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            ...)
    </code>

    <h3>parse and register in <a href="http://code.google.com/p/garbage-pools/">garbage-pool</a></h3>
    <code>
        (gp:with-garbage-pool ()
            (gp:register-object (tree:parse #u"http://www.example.org/test.xml")))
    </code>

    <h3>serialize to file</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            (tree:serialize doc #P"out.xml"))
    </code>

    <h3>serialize to string</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            (tree:serialize doc :to-string))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;root/&gt;
        "
    </code>

    <h3>serialize to stream</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            (tree:serialize doc *standard-output*))
    </code>

    <h3>make element (no namespace)</h3>
    <code>
        (tree:release (make-element "root"))
    </code>

    <h3>make element (with namespace, no prefix)</h3>
    <code>
        (tree:release (make-element "root" "http://www.sample.org"))
    </code>

    <h3>make element (with namespace, with prefix)</h3>
    <code>
        (tree:release (make-element "root" "http://www.sample.org" "my"))
    </code>

    <h3>attributes (no namespace)</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            (setf (tree:attribute-value (tree:root doc) "attr") "Hello")
            (tree:attribute-value (tree:root doc) "attr"))
        "Hello"
    </code>

    <h3>attributes (with namesapce)</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root /&gt;")
            (setf (tree:attribute-value (tree:root doc) "attr" "www.sample.org") "Buy!")
            (tree:attribute-value (tree:root doc) "attr" "www.sample.org"))
        "Buy!"
    </code>

    <h3>text nodes</h3>
    <code>
        (tree:release (tree:make-text "Hello world!"))
    </code>

    <h3>comment nodes</h3>
    <code>
        (tree:release (tree:make-comment "It is a comment!"))
    </code>

    <h3>process instructions</h3>
    <code>
        (tree:release (tree:make-process-instruction "my-pi" "pi content"))
    </code>

    <h3>iterate by child nodes</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root&gt;&lt;a /&gt;&lt;b /&gt;&lt;c /&gt;&lt;/root&gt;")
            (iter (for node in-child-nodes (tree:root doc) with (:type :xml-element-node))
                  (collect (tree:local-name node))))
        ("a" "b" "c")
    </code>

    <h2>XPath API</h2>

    <h3>find string</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root attr=\"Hello world!\" /&gt;")
            (xpath:find-string doc "/root/@attr"))
        "Hello world!"
    </code>

    <h3>find number</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root&gt;&lt;a /&gt;&lt;b /&gt;&lt;c /&gt;&lt;/root&gt;")
            (xpath:find-number doc "count(/root/node())"))
        3.0d0
    </code>

    <h3>iterate nodes in xpath query result</h3>
    <code>
        (tree:with-parse-document (doc "&lt;root&gt;&lt;a /&gt;&lt;b /&gt;&lt;c /&gt;&lt;/root&gt;")
            (iter (for node in-xpath-result "/root/node()" on doc)
                  (collect (tree:local-name node))))
        ("a" "b" "c")
    </code>


    <h2>XSLT API</h2>

    <h3>simple transformation</h3>
    <code>
        (xslt:with-stylesheet (style "&lt;?xml version=\"1.0\"?&gt;
        &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;
            &lt;xsl:template match=\"/\"&gt;
                &lt;result&gt;
                    &lt;xsl:value-of select=\".\" /&gt;
                &lt;/result&gt;
            &lt;/xsl:template&gt;
        &lt;/xsl:stylesheet&gt;")
          (tree:with-parse-document (doc "&lt;root&gt;Hello world&lt;/root&gt;")
            (xslt:with-transform-result (res (style doc))
              (tree:serialize res :to-string))))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;result&gt;Hello world&lt;/result&gt;
        "
    </code>

    <h3>transformation with args</h3>
    <code>
        (xslt:with-stylesheet (style "&lt;?xml version=\"1.0\"?&gt;
        &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;
            &lt;xsl:param name=\"arg1\" /&gt;
            &lt;xsl:template match=\"/\"&gt;
                &lt;result&gt;
                    &lt;xsl:value-of select=\"concat($arg1, ' ', $arg2)\" /&gt;
                &lt;/result&gt;
            &lt;/xsl:template&gt;
        &lt;/xsl:stylesheet&gt;")
          (xslt:stylesheet-set-param style "arg1" "Hello")
          (xslt:stylesheet-set-param style "arg2" "world")
          (tree:with-parse-document (doc "&lt;root /&gt;")
            (xslt:with-transform-result (res (style doc))
              (tree:serialize res :to-string))))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;result&gt;Hello world&lt;/result&gt;
        "
    </code>


    <h2>Extending cl-libxml2</h2>

    <h3>Custom URL resolving and process-xinclude </h3>
    <code>
        (tree:with-custom-resolvers ((lambda (url id ctxt)
                                       (declare (ignore id))
                                       (if (eql (puri:uri-scheme url) :my1)
                                           (tree:resolve-string "&lt;node1 /&gt;" ctxt)))
                                     (lambda (url id ctxt)
                                       (declare (ignore id))
                                       (if (eql (puri:uri-scheme url) :my2)
                                           (tree:resolve-string "&lt;node2 /&gt;" ctxt))))
          (tree:with-parse-document (doc "&lt;root xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;
            &lt;xi:include href=\"my1:doc\" /&gt;
            &lt;xi:include href=\"my2:doc\" /&gt;
            &lt;xi:include href=\"my3:doc\" /&gt;
        &lt;/root&gt;")
            (tree:process-xinclude doc)
            (tree:serialize doc :to-string)))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;root xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;
            &lt;node1/&gt;
            &lt;node2/&gt;
            &lt;xi:include href=\"my3:doc\"/&gt;
        &lt;/root&gt;
        "
    </code>

    <h3>Custom URL resolving and XSLT-transformation</h3>
    <code>
        (tree:with-custom-resolvers ((lambda (url id ctxt)
                                       (declare (ignore url id))
                                       (tree:resolve-string "&lt;node&gt;Hello world&lt;/node&gt;" ctxt)))
        (xslt:with-stylesheet (style "&lt;?xml version=\"1.0\"?&gt;
        &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;
            &lt;xsl:template match=\"/\"&gt;
                &lt;result&gt;
                    &lt;xsl:copy-of select=\"document('data')\" /&gt;
                &lt;/result&gt;
            &lt;/xsl:template&gt;
        &lt;/xsl:stylesheet&gt;")
          (tree:with-parse-document (doc "&lt;root/&gt;")
            (xslt:with-transform-result (res (style doc))
              (tree:serialize res :to-string)))))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;result&gt;
            &lt;node&gt;Hello world&lt;/node&gt;
        &lt;/result&gt;
        "
    </code>

    <h3>XPath extension functions</h3>
    <code>
        (xpath:define-xpath-function hello-world () "Hello world!")
        HELLO-WORLD

        (xpath:define-xpath-function echo (msg) msg)
        ECHO

        (xpath:define-xpath-function join (delimiter &amp;rest strs)
          (iter (for str in strs)
                (reducing str
                   by (lambda (s x) (concatenate 'string s delimiter x)))))
        JOIN

        (xpath:with-xpath-functions ((hello-world "hello-world")
                                     (echo "echo")
                                     (join "join"))
          (tree:with-parse-document (doc "&lt;root /&gt;")
            (xpath:find-string doc "join('//', hello-world(), '---', echo('Buy!'))")))
        "Hello world!//---//Buy!"
    </code>

    <h3>XSLT extension elements</h3>
    <code>
        (xslt:define-xslt-element my-copy-of (self input output)
          (iter (for node in-xpath-result (tree:attribute-value self "select")  on input)
                (tree:append-child output (tree:copy node))))
        MY-COPY-OF

        (xslt:with-xslt-elements ((my-copy-of "copy-of" "www.sample.org"))
          (xslt:with-stylesheet (style "&lt;?xml version=\"1.0\"?&gt;
        &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:my=\"www.sample.org\"  extension-element-prefixes=\"my\" version=\"1.0\"&gt;
            &lt;xsl:template match=\"/root\"&gt;
                &lt;result&gt;&lt;my:copy-of select=\"node()[@attr]\" /&gt;&lt;/result&gt;
            &lt;/xsl:template&gt;
        &lt;/xsl:stylesheet&gt;")
            (tree:with-parse-document (doc "&lt;root&gt;&lt;a attr=\"1\"/&gt;&lt;b /&gt;&lt;c attr=\"2\"/&gt;&lt;d /&gt;&lt;/root&gt;")
              (xslt:with-transform-result (res (style doc))
                (tree:serialize res :to-string)))))
        "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
        &lt;result&gt;
            &lt;a attr=\"1\"/&gt;
            &lt;c attr=\"2\"/&gt;
        &lt;/result&gt;
        "
    </code>

    <h2>X-Factory system</h2>
    <code>
(xtree:with-object (doc (xfactory:with-document-factory 
                            ((XUL "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" "xul")
                             (SVG "http://www.w3.org/2000/svg" "svg"))
                          (XUL "window"
                               (xfactory:namespace "http://www.w3.org/1999/xlink" "xlink")
                               (XUL "vbox"
                                    (xfactory:attribute :flex 1
                                                        :width 500)
                                    (loop for i from 1 to 3
                                       do (XUL "label" 
                                               (xfactory:text "text ~A" i)))
                                    (SVG "svg"
                                         (xfactory:attribute :width "500px"
                                                             :height "500px")
                                         (SVG "a"
                                              (xfactory:attribute "xlink:href" "http://www.w3.org")
                                              (SVG "rect"
                                                   (xfactory:attribute :x 100
                                                                       :y 100
                                                                       :width 300
                                                                       :height 200
                                                                       :fill "red"))))))))
  (xtree:serialize doc *standard-output* :pretty-print t))
==>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xul:window xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;xul:vbox flex="1" width="500"&gt;
    &lt;xul:label&gt;text 1&lt;/xul:label&gt;
    &lt;xul:label&gt;text 2&lt;/xul:label&gt;
    &lt;xul:label&gt;text 3&lt;/xul:label&gt;
    &lt;svg:svg xmlns:svg="http://www.w3.org/2000/svg" width="500px" height="500px"&gt;
      &lt;svg:a xlink:href="http://www.w3.org"&gt;
        &lt;svg:rect x="100" y="100" width="300" height="200" fill="red"/&gt;
      &lt;/svg:a&gt;
    &lt;/svg:svg&gt;
  &lt;/xul:vbox&gt;
&lt;/xul:window&gt;
  
    </code>
</page>
