# -*- mode: org -*-
#+TITLE: CL-LIBXML2. API.

* Base API (imitate cxml-stp)

** Parseing and Serializing
*** DONE parse (obj source)
**** DONE (path pathname)
**** DONE (uri puri)
**** DONE (stream stream)
**** DONE (stream string-stream)
**** DONE (str string)
**** DONE (octets array)
*** TODO serialize (obj target)
**** DONE (doc document) (path pathname)
**** TODO (doc document) (stream stream)
**** DONE (doc document) (:to-string)
**** DONE (el node) target
     
** Names and Namespaces URIs
*** DONE local-name (node)
*** DONE namespace-uri (node)
*** DONE namespace-prefix (node)
*** DONE base-url (obj)

** Creating nodes
*** DONE make-document (document-element)
*** DONE make-comment (data)
*** TODO make-document-type (root-element-name &optional system-id public-id interanal-subset)
*** DONE make-element (name &optional uri href)
*** DONE make-process-instruction (target data)
*** DONE make-text (data)
*** DONE copy (node)
    Copies a node recursively.
** Check node type
*** DONE element-p (node &key throw-error)
*** DONE attribute-p (node &key throw-error)
*** DONE text-p (node &key throw-error)
*** DONE comment-p (node &key throw-error)
*** DONE process-instruction-p (node &key throw-error)
** Listing Child Nodes
*** DONE parent (node)
*** DONE document (node)
*** DONE first-child (node)
*** DONE last-child (node)
*** DONE previous-sibling (node)
*** DONE next-sibling (node)
*** DONE iter (FOR child IN-CHILD-NODES node WITH ())
**** DONE with (:local-name name)
**** DONE with (:type type)
**** DONE with (:ns  ns-uri)
**** DONE with (:filter fun)
*** DONE iter (FOR child IN-NEXT-SIBLINGS node WITH ())
*** DONE iter (FOR child IN-NEXT-SIBLINGS-FROM node WITH ())
*** DONE iter (FOR child IN-PREV-SIBLINGS node WITH ())
*** DONE iter (FOR child IN-PREV-SIBLINGS-FROM node WITH ())

** Adding and Removing Child Nodes
*** DONE prepend-child (parent child)
    Adds child as the first child of parent, if allowed.
*** DONE append-child (parent child)
    Adds child as the last child of parent, if allowed.
*** DONE detach (node)
    Delete node from its parent, not free node.
*** DONE remove-child (child)
    Remove child from parent and delete it
*** DONE insert-child-before (new-child ref-child)
    Adds new-child before ref-child as a child node of parent, if allowed
*** DONE insert-child-after (new-child ref-child)
    Add new-child after ref-child as a child node of parent, if allowed
*** DONE replace-child (old-child new-child &key (delete t))
    Adds new-child insted of old-child as a child node of parent, if allowed.

** Elements and their Attributes
*** DONE attribute-value
*** DONE (setf (attribute-value ...
*** DONE remove-attribute
*** DONE with-attributes
*** DONE iter (FOR (value name href)  IN-NODE-ATTRIBUTES node WITH)
*** DONE add-extra-namespace (element prefix uri)
*** TODO remove-extra-namespace (element prefix)
*** TODO iter (FOR (prefix uri) IN-EXTRA-NAMESPACES)


* XPath API
** DONE with-compiled-expression 
** DONE eval-expression
** DONE find-string
** DONE find-number
** DONE find-boolean
** DONE find-single-node
** DONE iter (FOR item IN-XPATH query ON node &optional WITH-NS-MAP (((prefix1 ns1) (prefix2 ns2) ...) *default-ns-map*))
** DONE getpath (node)
   
* XSLT API
** DONE parse-stylesheet
** DONE with-stylesheet
** DONE stylesheet-set-param
** DONE stylesheet-remove-param
** DONE stylesheet-clear-params
** DONE transform
** DONE with-transform-result

* Extending
** Document loading and URL resolving
*** DONE with-custom-resolvers
*** DONE resolve-file/url
*** DONE resolve-string
*** DONE resolve-stream
** XPath extension functions
*** DONE define-xpath-function
*** DONE with-xpath-functions
** XSLT extension elements
*** DONE define-xslt-element
*** DONE with-xslt-elements

